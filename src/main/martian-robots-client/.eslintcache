[{"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\index.js":"1","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\reportWebVitals.js":"2","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\App.js":"3","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\RobotForm.js":"4","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\PlanetGrid.js":"5","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\Store.js":"6","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\RootReducer.js":"7","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\Reducers\\robots.js":"8","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\AllActions.js":"9","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\Actions\\robotActions.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":411,"mtime":1608398942730,"results":"14","hashOfConfig":"12"},{"size":4715,"mtime":1608550349678,"results":"15","hashOfConfig":"12"},{"size":1653,"mtime":1608549471843,"results":"16","hashOfConfig":"12"},{"size":451,"mtime":1608531884977,"results":"17","hashOfConfig":"12"},{"size":164,"mtime":1608398853764,"results":"18","hashOfConfig":"12"},{"size":3138,"mtime":1608551032436,"results":"19","hashOfConfig":"12"},{"size":255,"mtime":1608535484038,"results":"20","hashOfConfig":"12"},{"size":774,"mtime":1608535474459,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"16ej1kn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\index.js",[],["45","46"],"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\reportWebVitals.js",[],"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\App.js",[],"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\RobotForm.js",["47"],"import React, {useState} from 'react';\r\nimport {Form, Col, Button} from 'react-bootstrap'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport AllActions from './Redux/AllActions'\r\n\r\nconst RobotForm = () => {\r\n\r\n    var robots = useSelector(state => state.robots.robots)\r\n    var coordinates = useSelector(state => state.robots.coordinates)\r\n    const dispatch = useDispatch()\r\n\r\n    const onCoordinateChange = (coordinate,event) => {\r\n        if (coordinate === \"X\"){\r\n            dispatch(AllActions.updateCoordinates({...coordinates, xPosition: event.target.value}))\r\n        }\r\n        else{\r\n            dispatch(AllActions.updateCoordinates({...coordinates, yPosition: event.target.value}))\r\n        }\r\n    }\r\n\r\n    const updateRobot = (robot) => {\r\n        console.log(robot)\r\n        dispatch(AllActions.updateRobot(robot))\r\n    }\r\n\r\n    const submitRobots = (coordinates,robots) => {\r\n        \r\n        var requestRobots = robots.map(obj => createRobotRequest(obj))\r\n        \r\n        var requestBody = {\r\n            \"coordinates\": coordinates,\r\n            \"robots\": requestRobots\r\n        }\r\n        console.log(requestBody)\r\n        dispatch(AllActions.submitRobots(requestBody))\r\n\r\n    }\r\n\r\n    const createRobotRequest = (robot) => {\r\n        return {\r\n            \"gridPosition\": {\r\n              \"endCoordinates\": null,\r\n              \"isLost\": false,\r\n              \"lastKnownCoordiantes\": null,\r\n              \"orientation\": robot.orientation,\r\n              \"startCoordinates\": {\r\n                \"xPosition\": robot.xCoordinate,\r\n                \"yPosition\": robot.yCoordinate\r\n              },\r\n              \"stringFormat\": \"\"\r\n            },\r\n            \"instructions\": robot.instructions,\r\n            \"uuid\": robot.id\r\n          }\r\n    }\r\n    \r\n    return (\r\n        <div style={{margin:\"auto\", padding:\"10px\"}}>\r\n            <Form>\r\n            <Form.Group>\r\n            <Form.Row>\r\n                <Form.Label>Upper Right Coordinates</Form.Label>\r\n            </Form.Row>\r\n            <Form.Row>\r\n                <Col xs=\"auto\">\r\n                <Form.Control type=\"number\" placeholder=\"X\" onChange={(event)=> onCoordinateChange(\"X\", event)} value={coordinates.xPosition}/>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                <Form.Control type=\"number\" placeholder=\"Y\" onChange={(event)=> onCoordinateChange(\"Y\", event)} value={coordinates.yPosition}/>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                <Button onClick={() => dispatch(AllActions.resetRobots())}>Reset</Button>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                <Button onClick={() => submitRobots(coordinates,robots)}>Submit</Button>\r\n                </Col>\r\n            </Form.Row>\r\n            </Form.Group>\r\n            <Form.Group>\r\n            {robots.map((robot) =>\r\n                (            <div>\r\n                    <Form.Row>\r\n                        <Form.Label>Robot-{robot.id}</Form.Label>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Col xs=\"auto\">\r\n                        <Form.Control type=\"number\" placeholder=\"X\" value={robot.xCoordinate} onChange={(event)=> updateRobot({...robot, xCoordinate: event.target.value})} />\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                        <Form.Control type=\"number\" placeholder=\"Y\"  value={robot.yCoordinate} onChange={(event)=> updateRobot({...robot, yCoordinate: event.target.value})}/>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                        <Form.Control as=\"select\" placeholder=\"Orientation\" value={robot.orientation} onChange={(event)=> updateRobot({...robot, orientation: event.target.value})}>\r\n                            <option value=\"North\">North</option>\r\n                            <option value=\"East\">East</option>\r\n                            <option value=\"South\">South</option>\r\n                            <option value=\"West\">West</option>\r\n                        </Form.Control>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                        <Form.Control type=\"text\" placeholder=\"Instructions\" value={robot.instructions} onChange={(event)=> updateRobot({...robot, instructions: event.target.value})}/>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </div>))}\r\n            <br/>\r\n            <Form.Row>\r\n                <Button onClick={() => dispatch(AllActions.addRobot())}>Add Robot</Button>\r\n            </Form.Row>\r\n            </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nRobotForm.defaultProps = {\r\n\r\n}\r\n\r\nexport default RobotForm","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\PlanetGrid.js",["48"],"import React, {useState} from 'react';\r\nimport {useSelector} from 'react-redux'\r\nimport {ReactComponent as RobotLogo} from './SVG/Robot.svg';\r\n\r\nfunction PlanetGrid(){\r\n    var coordinates = useSelector(state => state.robots.coordinates)\r\n    var gridRobots = useSelector(state => state.robots.gridRobots)\r\n    console.log(coordinates)\r\n    return (\r\n        <div style={{margin: \"auto\", backgroundColor:\"#9D0000\", height:((coordinates.yPosition * 100) + 70) + \"px\", width:((coordinates.xPosition *100) + 70) + \"px\"}}>\r\n            {gridRobots.map((obj) => {\r\n                var colour = \"#FFD700\"\r\n                var gridPosition = {\r\n                    xPosition: obj.gridPosition.endCoordinates.xPosition,\r\n                    yPosition: obj.gridPosition.endCoordinates.yPosition\r\n                }\r\n                if (obj.gridPosition.isLost){\r\n                    \r\n                    colour = \"#000000\"\r\n                    gridPosition = {\r\n                        xPosition: obj.gridPosition.lastKnownCoordiantes.xPosition,\r\n                        yPosition: obj.gridPosition.lastKnownCoordiantes.yPosition\r\n                    }\r\n                }\r\n                return(\r\n                <div style={{height: \"50px\", width:\"50px\",position:\"relative\", left:gridPosition.xPosition*100 + \"px\", top:(coordinates.yPosition * 100 - gridPosition.yPosition*100) + \"px\"}}>\r\n                    <RobotLogo style={{fill: colour}}/>\r\n                        <div style={{textAlign: \"center\", color:colour}}>{obj.gridPosition.stringFormat}</div>\r\n                    </div>)\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n export default PlanetGrid","G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\Store.js",[],"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\RootReducer.js",[],"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\Reducers\\robots.js",["49"],"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\AllActions.js",[],"G:\\Users\\strum.DESKTOP-0NLU6F2\\Projects\\martian-robots\\src\\main\\martian-robots-client\\src\\Redux\\Actions\\robotActions.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":24},{"ruleId":"54","severity":1,"message":"55","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":24},{"ruleId":"54","severity":1,"message":"58","line":56,"column":7,"nodeType":"56","messageId":"57","endLine":56,"endColumn":17},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'testResult' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]